import streamlit as st
import pandas as pd
import plotly.express as px
import os
import ssl
import urllib3
import traceback
import openpyxl
from collections import Counter
from shareplum import Site
from shareplum import Office365
from shareplum.site import Version
from dotenv import load_dotenv


def baixar_planilha():
    """
    --> Fun√ß√£o para baixar a planilha do SharePoint
    """
    # Carregando vari√°veis de ambiente (credenciais)
    load_dotenv()

    # Configura√ß√µes para certifica√ß√£o SSL (Firewall da FIAP)
    urllib3.disable_warnings()  # Desabilita avisos sobre certifica√ß√£o SSL
    ssl._create_default_https_context = ssl._create_unverified_context  # Contexto da certifica√ß√£o SSL para n√£o verificar certificados

    # URL para Planilha do Excel com a planilha atualizada pelo Microsoft Forms
    sharepoint_url = "https://fiapcom-my.sharepoint.com"
    site_url = "https://fiapcom-my.sharepoint.com/personal/rm554497_fiap_com_br"

    # Caminho do Arquivo
    caminho_arquivo = "Documents/Impacto do Trabalho Remoto na Efici√™ncia do Trabalhador.xlsx"
    arquivo_destino = "planilha.xlsx"

    # Credenciais do Microsoft 365
    usuario = os.getenv("USUARIO")
    senha = os.getenv("SENHA")

    caminho_planilha = f"{os.path.dirname(__file__)}\\planilha.xlsx"

    try:
        # Autentica√ß√£o no Microsoft 365
        authcookie = Office365(sharepoint_url, username=usuario, password=senha).GetCookies()
        site = Site(site_url, version=Version.v365, authcookie=authcookie)

        # Acessando a pasta do Sharepoint
        folder = site.Folder("Documents")

        # Baixar arquivo
        file_content = folder.get_file(caminho_arquivo.split('/')[-1])

        # Salvar planilha com os dados do formul√°rio
        with open(arquivo_destino, "wb") as f:
            f.write(file_content)

        st.success(f"Arquivo baixado com sucesso! Caminho {caminho_planilha}")
        return arquivo_destino
    except Exception as e:
        st.error(f"Erro ao baixar o arquivo: {str(e)}")
        traceback.print_exc()
        return None


def ler_dados_planilha(caminho_planilha=None):
    """
    --> Fun√ß√£o para ler os dados da planilha j√° baixada
    :param caminho_planilha: Caminho para planilha que deseja realizar a leitura (valor padr√£o: None)
    """
    if caminho_planilha is None:
        caminho_planilha = "planilha.xlsx"

    try:
        # Abrindo planilha com os dados
        objeto_workbook = openpyxl.load_workbook(caminho_planilha)
        objeto_planilha = objeto_workbook.active

        # Iterando sobre todos os valores da coluna das idades (coluna G) e armazenando em uma lista
        valores_idade = []
        for celula in objeto_planilha["G"]:
            if celula.value is not None:  # Verifica se a c√©lula n√£o est√° vazia
                valores_idade.append(celula.value)

        # Remove o cabe√ßalho
        if valores_idade and isinstance(valores_idade[0], str) and not any(
                d in valores_idade[0].lower() for d in ['ano', '18-', '25-', '35-']):
            valores_idade.pop(0)

        # Fechando o workbook da Planilha
        objeto_workbook.close()

        return valores_idade
    except Exception as e:
        st.error(f"Erro ao ler a planilha: {str(e)}")
        return []


def main():
    """
    --> Fun√ß√£o com a execu√ß√£o da interface principal usando o Streamlit
    """
    # Configura√ß√£o da p√°gina
    st.set_page_config(
        page_title="Dashboard Trabalho Remoto",
        page_icon="üìä",
        layout="wide"
    )

    # T√≠tulo do dashboard
    st.title("üìä Dashboard Trabalho Remoto")

    # Sidebar para op√ß√µes
    st.sidebar.header("‚öôÔ∏è Op√ß√µes")

    # Bot√£o para atualizar os dados
    if st.sidebar.button("üì• Baixar dados atualizados"):
        arquivo = baixar_planilha()
        if arquivo:
            st.sidebar.success("Dados atualizados com sucesso!")

    valores_idade = ler_dados_planilha()

    if not valores_idade:
        st.warning(
            "N√£o foi poss√≠vel ler os dados da planilha. Certifique-se de que o arquivo existe ou use os dados de exemplo.")
        st.stop()

    # Contagem de faixas et√°rias
    contagem_idades = Counter(valores_idade)

    # Criar um DataFrame para facilitar a visualiza√ß√£o
    df_idades = pd.DataFrame({
        'Faixa Et√°ria': list(contagem_idades.keys()),
        'Quantidade': list(contagem_idades.values())
    })

    # Ordenar o DataFrame pelas faixas et√°rias de forma l√≥gica
    ordem_faixas = ['Menos de 18 anos', '18-24 anos', '25-34 anos', '35-44 anos',
                    '45-54 anos', '55-64 anos', '65 anos ou mais']

    # Filtra apenas as faixas que existem nos dados
    ordem_faixas_filtrada = [faixa for faixa in ordem_faixas if faixa in df_idades['Faixa Et√°ria'].values]

    # Ordena o DataFrame se houver faixas et√°rias v√°lidas
    if ordem_faixas_filtrada:
        df_idades['Faixa Et√°ria'] = pd.Categorical(df_idades['Faixa Et√°ria'],
                                                   categories=ordem_faixas_filtrada,
                                                   ordered=True)
        df_idades = df_idades.sort_values('Faixa Et√°ria')

    # Criar layout do dashboard em colunas
    col1, col2 = st.columns(2)

    # Coluna 1: Tabela de Dados
    with col1:
        st.header("‚è≥ Idade")
        st.image(f"{os.path.dirname(__file__)}\\assets\\idades.png", caption="Idade dos Participantes da Pesquisa")
        st.subheader("Tabela de Distribui√ß√£o")

        # Adiciona coluna de percentual
        total_respostas = df_idades['Quantidade'].sum()
        df_idades['Percentual'] = df_idades['Quantidade'].apply(lambda x: f"{(x / total_respostas * 100):.1f}%")

        # Exibe a tabela formatada
        st.dataframe(
            df_idades,
            column_config={
                "Quantidade": st.column_config.NumberColumn(format="%d"),
            },
            use_container_width=True,
            hide_index=True
        )

        # Adiciona m√©tricas
        st.subheader("M√©tricas")
        metricas_col1, metricas_col2, metricas_col3 = st.columns(3)

        with metricas_col1:
            st.metric("Total de Respostas", total_respostas)

        with metricas_col2:
            faixa_mais_comum = df_idades.loc[df_idades['Quantidade'].idxmax(), 'Faixa Et√°ria']
            st.metric("Faixa Et√°ria Mais Comum", faixa_mais_comum)

        with metricas_col3:
            maior_quantidade = df_idades['Quantidade'].max()
            percentual_maior = (maior_quantidade / total_respostas) * 100
            st.metric("Representa√ß√£o da Faixa Mais Comum", f"{percentual_maior:.1f}%")

    # Coluna 2: Visualiza√ß√µes Gr√°ficas
    with col2:
        # Tipo de gr√°fico (com radio buttons)
        tipo_grafico = st.radio(
            "Selecione o tipo de gr√°fico:",
            ["Gr√°fico de Barras", "Gr√°fico de Pizza", "Treemap", "Funil"],
            horizontal=True
        )

        if tipo_grafico == "Gr√°fico de Barras":
            fig = px.bar(
                df_idades,
                x='Faixa Et√°ria',
                y='Quantidade',
                text='Quantidade',
                color='Faixa Et√°ria',
                title="Distribui√ß√£o por Faixa Et√°ria",
                height=400
            )
            fig.update_layout(xaxis_title="Faixa Et√°ria", yaxis_title="Quantidade")
            st.plotly_chart(fig, use_container_width=True)

        elif tipo_grafico == "Gr√°fico de Pizza":
            fig = px.pie(
                df_idades,
                values='Quantidade',
                names='Faixa Et√°ria',
                title="Distribui√ß√£o por Faixa Et√°ria (%)",
                height=400
            )
            fig.update_traces(textposition='inside', textinfo='percent+label')
            st.plotly_chart(fig, use_container_width=True)

        elif tipo_grafico == "Treemap":
            fig = px.treemap(
                df_idades,
                path=['Faixa Et√°ria'],
                values='Quantidade',
                title="Distribui√ß√£o por Faixa Et√°ria",
                height=400
            )
            fig.update_traces(textinfo='label+percent entry')
            st.plotly_chart(fig, use_container_width=True)

        else:
            fig = px.funnel(
                df_idades,
                x='Quantidade',
                y='Faixa Et√°ria',
                title="Distribui√ß√£o por Faixa Et√°ria",
                height=400
            )
            st.plotly_chart(fig, use_container_width=True)

        # Distribui√ß√µes adicionais e an√°lises
        st.subheader("An√°lise Expandida")

        # Mostra os dados brutos se solicitado
        if st.checkbox("Mostrar dados brutos"):
            st.write("Lista de todas as idades coletadas:")
            st.write(valores_idade)

    # Sobre o dashboard
    st.sidebar.markdown("---")
    st.sidebar.subheader("Sobre")
    st.sidebar.caption(
        """
        Este dashboard apresenta a distribui√ß√£o de idades dos participantes
        da pesquisa sobre "Impacto do Trabalho Remoto na Efici√™ncia do Trabalhador".

        Os dados s√£o carregados diretamente do SharePoint.
        """
    )


# Executa a aplica√ß√£o
if __name__ == "__main__":
    main()
