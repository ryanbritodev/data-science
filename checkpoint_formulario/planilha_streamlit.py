import streamlit as st
import pandas as pd
import plotly.express as px
import os
import ssl
import urllib3
import traceback
import openpyxl
from collections import Counter
from shareplum import Site
from shareplum import Office365
from shareplum.site import Version
from dotenv import load_dotenv

caminho_planilha = f"{os.path.dirname(__file__)}\\planilha.xlsx"


def baixar_planilha():
    """
    --> Fun√ß√£o para baixar a planilha do Microsoft 365 no SharePoint
    """
    # Carregando vari√°veis de ambiente (credenciais de usu√°rio)
    load_dotenv()

    # Configura√ß√µes do certificado SSL (Firewall da FIAP)
    urllib3.disable_warnings()  # Desabilita os avisos do certificado SSL
    ssl._create_default_https_context = ssl._create_unverified_context  # Criando um contexto que n√£o verifica a certifica√ß√£o SSL

    # URL da Planilha do Excel no Sharepoint atualizada pelo Microsoft Forms
    sharepoint_url = "https://fiapcom-my.sharepoint.com"
    site_url = "https://fiapcom-my.sharepoint.com/personal/rm554497_fiap_com_br"

    # Caminho do Arquivo dentro do Sharepoint
    caminho_arquivo = "Documents/Impacto do Trabalho Remoto na Efici√™ncia do Trabalhador.xlsx"
    arquivo_destino = "planilha.xlsx"

    # Credenciais do Microsoft 365
    usuario = os.getenv("USUARIO")
    senha = os.getenv("SENHA")

    try:
        # Autentica√ß√£o no Microsoft 365
        authcookie = Office365(sharepoint_url, username=usuario, password=senha).GetCookies()
        site = Site(site_url, version=Version.v365, authcookie=authcookie)

        # Acessando a pasta do Sharepoint
        folder = site.Folder("Documents")

        # Baixando arquivo (get)
        file_content = folder.get_file(caminho_arquivo.split('/')[-1])

        # Salvar planilha com os dados do formul√°rio
        with open(arquivo_destino, "wb") as f:
            f.write(file_content)

        st.success(f'Arquivo baixado com sucesso! Caminho do arquivo: "{caminho_planilha}"')
        return arquivo_destino
    except Exception as e:
        st.error(f"Erro ao baixar o arquivo: {str(e)}")
        traceback.print_exc()
        return None


def ler_dados_planilha(caminho_planilha=None):
    """
    --> Fun√ß√£o para ler os dados da planilha j√° baixada
    :param caminho_planilha: Caminho para planilha que deseja realizar a leitura (valor padr√£o: None)
    """
    if caminho_planilha is None:
        caminho_planilha = "planilha.xlsx"

    try:
        # Abrindo planilha com os dados
        objeto_workbook = openpyxl.load_workbook(caminho_planilha)
        objeto_planilha = objeto_workbook.active

        # Iterando sobre todos os valores das colunas e armazenando em listas
        valores_idade = []
        for celula in objeto_planilha["G"]:
            if celula.value is not None:  # Verifica se a c√©lula n√£o est√° vazia
                valores_idade.append(celula.value)

        valores_frequencia = []
        for celula in objeto_planilha["H"]:
            if celula.value is not None:  # Verifica se a c√©lula n√£o est√° vazia
                valores_frequencia.append(celula.value)

        valores_produtividade = []
        for celula in objeto_planilha["I"]:
            if celula.value is not None:  # Verifica se a c√©lula n√£o est√° vazia
                # Converte para int se for n√∫mero
                if isinstance(celula.value, (int, float)):
                    valores_produtividade.append(int(celula.value))
                else:
                    try:
                        valores_produtividade.append(int(celula.value))
                    except:
                        pass  # Ignora valores que n√£o podem ser convertidos

        # Remove o cabe√ßalho
        if valores_idade and isinstance(valores_idade[0], str) and not any(
                d in valores_idade[0].lower() for d in ['ano', '18-', '25-', '35-']):
            valores_idade.pop(0)

        # Remove o cabe√ßalho das frequ√™ncias
        if valores_frequencia and isinstance(valores_frequencia[0], str):
            valores_frequencia.pop(0)

        # Fechando o workbook da Planilha
        objeto_workbook.close()

        return valores_idade, valores_frequencia, valores_produtividade
    except Exception as e:
        st.error(f"Erro ao ler a planilha: {str(e)}")
        return [], []


def main():
    """
    --> Fun√ß√£o com a execu√ß√£o da interface principal usando o Streamlit
    """

    # Configura√ß√£o da p√°gina
    st.set_page_config(
        page_title="Dashboard Trabalho Remoto",
        page_icon="üìä",
        layout="wide"
    )

    # Verifica√ß√£o da exist√™ncia do caminho da planilha
    if os.path.exists(caminho_planilha):
        pass
    else:
        baixar_planilha()

    # T√≠tulo do dashboard
    st.title("üìä Dashboard Trabalho Remoto")

    # Sidebar para op√ß√µes
    st.sidebar.header("‚öôÔ∏è Op√ß√µes")

    # Bot√£o para atualizar os dados (executa fun√ß√£o para baixar a planilha novamente
    if st.sidebar.button("üîÑ Atualizar Dados"):
        arquivo = baixar_planilha()
        if arquivo:
            st.sidebar.success("Dados atualizados com sucesso!")

    valores_idade, valores_frequencia, valores_produtividade = ler_dados_planilha()

    # Lista com as frequ√™ncias esperadas (exceto "Outra")
    frequencias_validas = [
        'Trabalho 100% remoto',
        'Trabalho em regime h√≠brido (parte presencial, parte remoto)',
        'Trabalho principalmente presencial, mas ocasionalmente remoto',
        'Trabalho exclusivamente presencial'
    ]

    def classificar_frequencia(texto):
        if texto in frequencias_validas:
            return texto
        else:
            return 'Outra'

    # Aplica a classifica√ß√£o na lista de frequ√™ncias coletadas
    valores_frequencia_classificados = [classificar_frequencia(texto) for texto in valores_frequencia]

    if not valores_idade or not valores_frequencia:
        st.warning(
            "N√£o foi poss√≠vel ler os dados da planilha. Certifique-se de que o arquivo existe ou use os dados de exemplo.")
        st.stop()

    # Contagem de faixas et√°rias
    contagem_idades = Counter(valores_idade)

    # Criar um DataFrame para facilitar a visualiza√ß√£o
    df_idades = pd.DataFrame({
        'Faixa Et√°ria': list(contagem_idades.keys()),
        'Quantidade': list(contagem_idades.values())
    })

    # Ordenar o DataFrame pelas faixas et√°rias de forma l√≥gica
    ordem_faixas = ['18-24 anos', '25-34 anos', '35-44 anos',
                    '45-54 anos', '55-64 anos', '65 anos ou mais']

    # Filtra apenas as faixas que existem nos dados
    ordem_faixas_filtrada = [faixa for faixa in ordem_faixas if faixa in df_idades['Faixa Et√°ria'].values]

    # Ordena o DataFrame se houver faixas et√°rias v√°lidas
    if ordem_faixas_filtrada:
        df_idades['Faixa Et√°ria'] = pd.Categorical(df_idades['Faixa Et√°ria'],
                                                   categories=ordem_faixas_filtrada,
                                                   ordered=True)
        df_idades = df_idades.sort_values('Faixa Et√°ria')

    # Criar layout do dashboard em colunas
    col1, col2 = st.columns(2)

    total_respostas = df_idades['Quantidade'].sum()

    # Coluna 1: Tabela de Dados
    with col1:
        st.title(f"Total de Respostas: {total_respostas}")
        st.header("‚è≥ Idade")
        st.image(f"{os.path.dirname(__file__)}\\assets\\idades.png", caption="Idade dos Participantes da Pesquisa")
        st.subheader("Tabela de Distribui√ß√£o")

        # Adiciona coluna de percentual
        df_idades['Percentual'] = df_idades['Quantidade'].apply(lambda x: f"{(x / total_respostas * 100):.1f}%")

        # Exibe a tabela formatada
        st.dataframe(
            df_idades,
            column_config={
                "Quantidade": st.column_config.NumberColumn(format="%d"),
            },
            use_container_width=True,
            hide_index=True
        )

        # Adiciona m√©tricas
        st.subheader("M√©tricas")
        metricas_col1, metricas_col2, metricas_col3 = st.columns(3)

        with metricas_col1:
            faixa_mais_comum = df_idades.loc[df_idades['Quantidade'].idxmax(), 'Faixa Et√°ria']
            st.metric("Faixa Et√°ria Mais Comum (Moda)", faixa_mais_comum)

        with metricas_col2:
            maior_quantidade = df_idades['Quantidade'].max()
            percentual_maior = (maior_quantidade / total_respostas) * 100
            st.metric("Representa√ß√£o da Faixa Mais Comum", f"{percentual_maior:.1f}%")

        with metricas_col3:
            # Dicion√°rio para mapear cada faixa et√°ria para um valor aproximado
            valores_medios = {
                '18-24 anos': 21,
                '25-34 anos': .5,
                '35-44 anos': 39.5,
                '45-54 anos': 49.5,
                '55-64 anos': 59.5,
                '65 anos ou mais': 70
            }

            # Calcular a m√©dia ponderada
            soma_ponderada = 0
            for i, row in df_idades.iterrows():
                faixa = row['Faixa Et√°ria']
                if faixa in valores_medios:
                    soma_ponderada += valores_medios[faixa] * row['Quantidade']

            media_ponderada = soma_ponderada / total_respostas

            st.metric("M√©dia de Idade (estimada)", f"{media_ponderada:.1f} anos")

    # Coluna 2: Visualiza√ß√µes Gr√°ficas
    with col2:
        # Tipo de gr√°fico (com radio buttons)
        tipo_grafico = st.radio(
            "Selecione o tipo de gr√°fico:",
            ["Gr√°fico de Barras", "Gr√°fico de Pizza", "Treemap", "Funil"],
            horizontal=True
        )

        if tipo_grafico == "Gr√°fico de Barras":
            fig = px.bar(
                df_idades,
                x='Faixa Et√°ria',
                y='Quantidade',
                text='Quantidade',
                color='Faixa Et√°ria',
                title="Distribui√ß√£o por Faixa Et√°ria",
                height=400
            )
            fig.update_layout(xaxis_title="Faixa Et√°ria", yaxis_title="Quantidade")
            st.plotly_chart(fig, use_container_width=True)

        elif tipo_grafico == "Gr√°fico de Pizza":
            fig = px.pie(
                df_idades,
                values='Quantidade',
                names='Faixa Et√°ria',
                title="Distribui√ß√£o por Faixa Et√°ria (%)",
                height=400
            )
            fig.update_traces(textposition='inside', textinfo='percent+label')
            st.plotly_chart(fig, use_container_width=True)

        elif tipo_grafico == "Treemap":
            fig = px.treemap(
                df_idades,
                path=['Faixa Et√°ria'],
                values='Quantidade',
                title="Distribui√ß√£o por Faixa Et√°ria",
                height=400
            )
            fig.update_traces(textinfo='label+percent entry')
            st.plotly_chart(fig, use_container_width=True)

        else:
            fig = px.funnel(
                df_idades,
                x='Quantidade',
                y='Faixa Et√°ria',
                title="Distribui√ß√£o por Faixa Et√°ria",
                height=400
            )
            st.plotly_chart(fig, use_container_width=True)

        # Distribui√ß√µes adicionais e an√°lises
        st.subheader("An√°lise Expandida")

        # Mostra os dados brutos se solicitado
        if st.checkbox("Mostrar dados brutos"):
            st.write("Lista de todas as idades coletadas:")
            st.write(valores_idade)

    # Separador
    st.markdown("---")

    # Contagem das frequ√™ncias de trabalho remoto
    contagem_frequencia = Counter(valores_frequencia_classificados)

    # Criar um DataFrame para facilitar a visualiza√ß√£o
    df_frequencia = pd.DataFrame({
        'Frequ√™ncia': list(contagem_frequencia.keys()),
        'Quantidade': list(contagem_frequencia.values())
    })

    # Ordenar o DataFrame por frequ√™ncia de trabalho remoto de forma l√≥gica
    ordem_frequencia = ['Trabalho 100% remoto', 'Trabalho em regime h√≠brido (parte presencial, parte remoto)', 'Trabalho principalmente presencial, mas ocasionalmente remoto',
                        'Trabalho exclusivamente presencial', 'Outra']

    # Filtra apenas as frequ√™ncias que existem nos dados
    ordem_frequencia_filtrada = [freq for freq in ordem_frequencia if freq in df_frequencia['Frequ√™ncia'].values]

    # Ordena o DataFrame se houver frequ√™ncias v√°lidas
    if ordem_frequencia_filtrada:
        df_frequencia['Frequ√™ncia'] = pd.Categorical(df_frequencia['Frequ√™ncia'],
                                                     categories=ordem_frequencia_filtrada,
                                                     ordered=True)
        df_frequencia = df_frequencia.sort_values('Frequ√™ncia')

    # Criar layout da segunda se√ß√£o em colunas
    freq_col1, freq_col2 = st.columns(2)

    # Coluna 1: Tabela de Dados de Frequ√™ncia
    with freq_col1:

        # T√≠tulo da se√ß√£o
        st.header("üè† Frequ√™ncia de Trabalho Remoto")

        # Imagem
        st.image(f"{os.path.dirname(__file__)}\\assets\\remoto.png", caption="Frequ√™ncia de Trabalho Remoto")

        st.subheader("Tabela de Distribui√ß√£o")

        # Adiciona coluna de percentual
        total_respostas_freq = df_frequencia['Quantidade'].sum()
        df_frequencia['Percentual'] = df_frequencia['Quantidade'].apply(
            lambda x: f"{(x / total_respostas_freq * 100):.1f}%")

        # Exibe a tabela formatada
        st.dataframe(
            df_frequencia,
            column_config={
                "Quantidade": st.column_config.NumberColumn(format="%d"),
            },
            use_container_width=True,
            hide_index=True
        )

        # Adiciona m√©tricas
        st.subheader("M√©tricas")
        freq_metricas_col1, freq_metricas_col2 = st.columns(2)

        with freq_metricas_col1:
            freq_mais_comum = df_frequencia.loc[df_frequencia['Quantidade'].idxmax(), 'Frequ√™ncia']
            st.metric("Frequ√™ncia Mais Comum", freq_mais_comum)

        with freq_metricas_col2:
            maior_quant_freq = df_frequencia['Quantidade'].max()
            percentual_maior_freq = (maior_quant_freq / total_respostas_freq) * 100
            st.metric("Representa√ß√£o", f"{percentual_maior_freq:.1f}%")


    # Coluna 2: Visualiza√ß√µes Gr√°ficas de Frequ√™ncia
    with freq_col2:
        # Tipo de gr√°fico (com radio buttons)
        tipo_grafico_freq = st.radio(
            "Selecione o tipo de gr√°fico:",
            ["Gr√°fico de Barras", "Gr√°fico de Pizza", "Treemap", "Funil"],
            horizontal=True,
            key="grafico_frequencia"  # Chave √∫nica para este componente
        )

        if tipo_grafico_freq == "Gr√°fico de Barras":
            fig = px.bar(
                df_frequencia,
                x='Frequ√™ncia',
                y='Quantidade',
                text='Quantidade',
                color='Frequ√™ncia',
                title="Distribui√ß√£o por Frequ√™ncia de Trabalho Remoto",
                height=400
            )
            fig.update_layout(xaxis_title="Frequ√™ncia de Trabalho Remoto", yaxis_title="Quantidade")
            st.plotly_chart(fig, use_container_width=True)

        elif tipo_grafico_freq == "Gr√°fico de Pizza":
            fig = px.pie(
                df_frequencia,
                values='Quantidade',
                names='Frequ√™ncia',
                title="Distribui√ß√£o por Frequ√™ncia de Trabalho Remoto (%)",
                height=400
            )
            fig.update_traces(textposition='inside', textinfo='percent+label')
            st.plotly_chart(fig, use_container_width=True)

        elif tipo_grafico_freq == "Treemap":
            fig = px.treemap(
                df_frequencia,
                path=['Frequ√™ncia'],
                values='Quantidade',
                title="Distribui√ß√£o por Frequ√™ncia de Trabalho Remoto",
                height=400
            )
            fig.update_traces(textinfo='label+percent entry')
            st.plotly_chart(fig, use_container_width=True)

        else:  # Funil
            fig = px.funnel(
                df_frequencia,
                x='Quantidade',
                y='Frequ√™ncia',
                title="Distribui√ß√£o por Frequ√™ncia de Trabalho Remoto",
                height=400
            )
            st.plotly_chart(fig, use_container_width=True)

        # An√°lise adicional
        st.subheader("An√°lise Expandida")

        # Mostra os dados brutos se solicitado
        if st.checkbox("Mostrar dados brutos", key="mostrar_dados_frequencia"):
            st.write("Lista de todas as frequ√™ncias coletadas:")
            st.write(valores_frequencia)

    # --- Se√ß√£o de Produtividade ---
    st.markdown("---")
    st.header("üìà Produtividade")

    # Cria DataFrame com contagem das respostas (valores de 1 a 5)
    contagem_produtividade = Counter(valores_produtividade)
    df_produtividade = pd.DataFrame({
        'Produtividade': list(contagem_produtividade.keys()),
        'Quantidade': list(contagem_produtividade.values())
    })

    # Ordena as classifica√ß√µes de 1 a 5
    ordem_produtividade = [1, 2, 3, 4, 5]
    df_produtividade['Produtividade'] = pd.Categorical(
        df_produtividade['Produtividade'],
        categories=ordem_produtividade,
        ordered=True
    )
    df_produtividade = df_produtividade.sort_values('Quantidade')

    # Calcula a m√©dia geral de produtividade
    media_produtividade = sum(valores_produtividade) / len(valores_produtividade)

    # Cria layout em duas colunas para a se√ß√£o de produtividade
    prod_col1, prod_col2 = st.columns(2)

    with prod_col1:
        # Imagem
        st.image(f"{os.path.dirname(__file__)}\\assets\\produtividade.png", caption="Produtividade no Trabalho Remoto")
        st.subheader("Tabela de Distribui√ß√£o")
        total_respostas_prod = df_produtividade['Quantidade'].sum()
        df_produtividade['Percentual'] = df_produtividade['Quantidade'].apply(
            lambda x: f"{(x / total_respostas_prod * 100):.1f}%"
        )
        st.dataframe(
            df_produtividade,
            column_config={"Quantidade": st.column_config.NumberColumn(format="%d")},
            use_container_width=True,
            hide_index=True
        )
        st.subheader("M√©tricas")
        st.metric("M√©dia de Produtividade", f"{media_produtividade:.1f}")

    with prod_col2:
        st.subheader("Visualiza√ß√£o Gr√°fica")
        tipo_grafico_prod = st.radio(
            "Selecione o tipo de gr√°fico:",
            ["Gr√°fico de Barras", "Gr√°fico de Pizza", "Treemap", "Funil"],
            horizontal=True,
            key="grafico_produtividade"
        )
        if tipo_grafico_prod == "Gr√°fico de Barras":
            fig = px.bar(
                df_produtividade,
                x='Produtividade',
                y='Quantidade',
                text='Quantidade',
                color='Produtividade',
                title="Distribui√ß√£o de Produtividade",
                height=400
            )
            fig.update_layout(xaxis_title="Classifica√ß√£o", yaxis_title="Quantidade")
            st.plotly_chart(fig, use_container_width=True)
        elif tipo_grafico_prod == "Gr√°fico de Pizza":
            fig = px.pie(
                df_produtividade,
                values='Quantidade',
                names='Produtividade',
                title="Distribui√ß√£o de Produtividade (%)",
                height=400
            )
            fig.update_traces(textposition='inside', textinfo='percent+label')
            st.plotly_chart(fig, use_container_width=True)
        elif tipo_grafico_prod == "Treemap":
            fig = px.treemap(
                df_produtividade,
                path=['Produtividade'],
                values='Quantidade',
                title="Distribui√ß√£o de Produtividade",
                height=400
            )
            fig.update_traces(textinfo='label+percent entry')
            st.plotly_chart(fig, use_container_width=True)
        else:  # Gr√°fico Funil
            fig = px.funnel(
                df_produtividade,
                x='Quantidade',
                y='Produtividade',
                title="Distribui√ß√£o de Produtividade",
                height=400
            )
            st.plotly_chart(fig, use_container_width=True)

        # Op√ß√£o para mostrar os dados brutos
        if st.checkbox("Mostrar dados brutos de Produtividade", key="mostrar_produtividade"):
            st.write("Lista de classifica√ß√µes de produtividade:")
            st.write(valores_produtividade)

    # Sobre o dashboard
    st.sidebar.markdown("---")
    st.sidebar.subheader("Sobre")
    st.sidebar.markdown(
        """
        Este dashboard apresenta a distribui√ß√£o de idades dos participantes
        da pesquisa sobre ["Impacto do Trabalho Remoto na Efici√™ncia do Trabalhador"](https://forms.office.com/Pages/ResponsePage.aspx?id=4r_bEbiJSUW-EM7DZOWVUQQHfmHLeF1GuQtv6hEPk_xUQk1ZVzJaR1FMUjlXRzZEMDBXTFdFME5LUi4u).

        Os dados s√£o carregados diretamente do SharePoint.
        """
    )
    st.sidebar.markdown("---")
    st.sidebar.subheader("Participantes")
    st.sidebar.markdown(
        """
        - Prof. Dr. Marcos Crivelaro - PF0076
        - Arthur Cotrick Pagani - RM554510
        - Diogo Leles Franciulli - RM558487
        - Felipe Sousa de Oliveira - RM559085
        - Ryan Brito Pereira Ramos - RM554497
        - Vitor Chaves - RM557067
        """
    )


# Executa a aplica√ß√£o somente se for executado diretamente
if __name__ == "__main__":
    main()
